using Kermalis.PokemonBattleEngine.Data;
using System;

namespace Kermalis.PokemonBattleEngine.DefaultData.Data;

public static class PBEDDEXPTables
{
	#region Tables

	private static ReadOnlySpan<uint> ErraticTable => new uint[100]
	{
		0,
		15,
		52,
		122,
		237,
		406,
		637,
		942,
		1_326,
		1_800,
		2_369,
		3_041,
		3_822,
		4_719,
		5_737,
		6_881,
		8_155,
		9_564,
		11_111,
		12_800,
		14_632,
		16_610,
		18_737,
		21_012,
		23_437,
		26_012,
		28_737,
		31_610,
		34_632,
		37_800,
		41_111,
		44_564,
		48_155,
		51_881,
		55_737,
		59_719,
		63_822,
		68_041,
		72_369,
		76_800,
		81_326,
		85_942,
		90_637,
		95_406,
		100_237,
		105_122,
		110_052,
		115_015,
		120_001,
		125_000,
		131_324,
		137_795,
		144_410,
		151_165,
		158_056,
		165_079,
		172_229,
		179_503,
		186_894,
		194_400,
		202_013,
		209_728,
		217_540,
		225_443,
		233_431,
		241_496,
		249_633,
		257_834,
		267_406,
		276_458,
		286_328,
		296_358,
		305_767,
		316_074,
		326_531,
		336_255,
		346_965,
		357_812,
		367_807,
		378_880,
		390_077,
		400_293,
		411_686,
		423_190,
		433_572,
		445_239,
		457_001,
		467_489,
		479_378,
		491_346,
		501_878,
		513_934,
		526_049,
		536_557,
		548_720,
		560_922,
		571_333,
		583_539,
		591_882,
		600_000
	};

	private static ReadOnlySpan<uint> FastTable => new uint[100]
	{
		0,
		6,
		21,
		51,
		100,
		172,
		274,
		409,
		583,
		800,
		1_064,
		1_382,
		1_757,
		2_195,
		2_700,
		3_276,
		3_930,
		4_665,
		5_487,
		6_400,
		7_408,
		8_518,
		9_733,
		11_059,
		12_500,
		14_060,
		15_746,
		17_561,
		19_511,
		21_600,
		23_832,
		26_214,
		28_749,
		31_443,
		34_300,
		37_324,
		40_522,
		43_897,
		47_455,
		51_200,
		55_136,
		59_270,
		63_605,
		68_147,
		72_900,
		77_868,
		83_058,
		88_473,
		94_119,
		100_000,
		106_120,
		112_486,
		119_101,
		125_971,
		133_100,
		140_492,
		148_154,
		156_089,
		164_303,
		172_800,
		181_584,
		190_662,
		200_037,
		209_715,
		219_700,
		229_996,
		240_610,
		251_545,
		262_807,
		274_400,
		286_328,
		298_598,
		311_213,
		324_179,
		337_500,
		351_180,
		365_226,
		379_641,
		394_431,
		409_600,
		425_152,
		441_094,
		457_429,
		474_163,
		491_300,
		508_844,
		526_802,
		545_177,
		563_975,
		583_200,
		602_856,
		622_950,
		643_485,
		664_467,
		685_900,
		707_788,
		730_138,
		752_953,
		776_239,
		800_000
	};

	private static ReadOnlySpan<uint> MediumFastTable => new uint[100]
	{
		0,
		8,
		27,
		64,
		125,
		216,
		343,
		512,
		729,
		1_000,
		1_331,
		1_728,
		2_197,
		2_744,
		3_375,
		4_096,
		4_913,
		5_832,
		6_859,
		8_000,
		9_261,
		10_648,
		12_167,
		13_824,
		15_625,
		17_576,
		19_683,
		21_952,
		24_389,
		27_000,
		29_791,
		32_768,
		35_937,
		39_304,
		42_875,
		46_656,
		50_653,
		54_872,
		59_319,
		64_000,
		68_921,
		74_088,
		79_507,
		85_184,
		91_125,
		97_336,
		103_823,
		110_592,
		117_649,
		125_000,
		132_651,
		140_608,
		148_877,
		157_464,
		166_375,
		175_616,
		185_193,
		195_112,
		205_379,
		216_000,
		226_981,
		238_328,
		250_047,
		262_144,
		274_625,
		287_496,
		300_763,
		314_432,
		328_509,
		343_000,
		357_911,
		373_248,
		389_017,
		405_224,
		421_875,
		438_976,
		456_533,
		474_552,
		493_039,
		512_000,
		531_441,
		551_368,
		571_787,
		592_704,
		614_125,
		636_056,
		658_503,
		681_472,
		704_969,
		729_000,
		753_571,
		778_688,
		804_357,
		830_584,
		857_375,
		884_736,
		912_673,
		941_192,
		970_299,
		1_000_000
	};

	private static ReadOnlySpan<uint> MediumSlowTable => new uint[100]
	{
		0,
		9,
		57,
		96,
		135,
		179,
		236,
		314,
		419,
		560,
		742,
		973,
		1_261,
		1_612,
		2_035,
		2_535,
		3_120,
		3_798,
		4_575,
		5_460,
		6_458,
		7_577,
		8_825,
		10_208,
		11_735,
		13_411,
		15_244,
		17_242,
		19_411,
		21_760,
		24_294,
		27_021,
		29_949,
		33_084,
		36_435,
		40_007,
		43_808,
		47_846,
		52_127,
		56_660,
		61_450,
		66_505,
		71_833,
		77_440,
		83_335,
		89_523,
		96_012,
		102_810,
		109_923,
		117_360,
		125_126,
		133_229,
		141_677,
		150_476,
		159_635,
		169_159,
		179_056,
		189_334,
		199_999,
		211_060,
		222_522,
		234_393,
		246_681,
		259_392,
		272_535,
		286_115,
		300_140,
		314_618,
		329_555,
		344_960,
		360_838,
		377_197,
		394_045,
		411_388,
		429_235,
		447_591,
		466_464,
		485_862,
		505_791,
		526_260,
		547_274,
		568_841,
		590_969,
		613_664,
		636_935,
		660_787,
		685_228,
		710_266,
		735_907,
		762_160,
		789_030,
		816_525,
		844_653,
		873_420,
		902_835,
		932_903,
		963_632,
		995_030,
		1_027_103,
		1_059_860
	};

	private static ReadOnlySpan<uint> SlowTable => new uint[100]
	{
		0,
		10,
		33,
		80,
		156,
		270,
		428,
		640,
		911,
		1_250,
		1_663,
		2_160,
		2_746,
		3_430,
		4_218,
		5_120,
		6_141,
		7_290,
		8_573,
		10_000,
		11_576,
		13_310,
		15_208,
		17_280,
		19_531,
		21_970,
		24_603,
		27_440,
		30_486,
		33_750,
		37_238,
		40_960,
		44_921,
		49_130,
		53_593,
		58_320,
		63_316,
		68_590,
		74_148,
		80_000,
		86_151,
		92_610,
		99_383,
		106_480,
		113_906,
		121_670,
		129_778,
		138_240,
		147_061,
		156_250,
		165_813,
		175_760,
		186_096,
		196_830,
		207_968,
		219_520,
		231_491,
		243_890,
		256_723,
		270_000,
		283_726,
		297_910,
		312_558,
		327_680,
		343_281,
		359_370,
		375_953,
		393_040,
		410_636,
		428_750,
		447_388,
		466_560,
		486_271,
		506_530,
		527_343,
		548_720,
		570_666,
		593_190,
		616_298,
		640_000,
		664_301,
		689_210,
		714_733,
		740_880,
		767_656,
		795_070,
		823_128,
		851_840,
		881_211,
		911_250,
		941_963,
		973_360,
		1_005_446,
		1_038_230,
		1_071_718,
		1_105_920,
		1_140_841,
		1_176_490,
		1_212_873,
		1_250_000
	};

	private static ReadOnlySpan<uint> FluctuatingTable => new uint[100]
	{
		0,
		4,
		13,
		32,
		65,
		112,
		178,
		276,
		393,
		540,
		745,
		967,
		1_230,
		1_591,
		1_957,
		2_457,
		3_046,
		3_732,
		4_526,
		5_440,
		6_482,
		7_666,
		9_003,
		10_506,
		12_187,
		14_060,
		16_140,
		18_439,
		20_974,
		23_760,
		26_811,
		30_146,
		33_780,
		37_731,
		42_017,
		46_656,
		50_653,
		55_969,
		60_505,
		66_560,
		71_677,
		78_533,
		84_277,
		91_998,
		98_415,
		107_069,
		114_205,
		123_863,
		131_766,
		142_500,
		151_222,
		163_105,
		172_697,
		185_807,
		196_322,
		210_739,
		222_231,
		238_036,
		250_562,
		267_840,
		281_456,
		300_293,
		315_059,
		335_544,
		351_520,
		373_744,
		390_991,
		415_050,
		433_631,
		459_620,
		479_600,
		507_617,
		529_063,
		559_209,
		582_187,
		614_566,
		639_146,
		673_863,
		700_115,
		737_280,
		765_275,
		804_997,
		834_809,
		877_201,
		908_905,
		954_084,
		987_754,
		1_035_837,
		1_071_552,
		1_122_660,
		1_160_499,
		1_214_753,
		1_254_796,
		1_312_322,
		1_354_652,
		1_415_577,
		1_460_276,
		1_524_731,
		1_571_884,
		1_640_000
	};

	#endregion

	public static uint GetEXPRequired(PBEGrowthRate type, byte level)
	{
		if (type >= PBEGrowthRate.MAX)
		{
			throw new ArgumentOutOfRangeException(nameof(type));
		}
		if (level < 1 || level > 100)
		{
			throw new ArgumentOutOfRangeException(nameof(level));
		}

		return GetTable(type)[level - 1];
	}

	public static byte GetEXPLevel(PBEGrowthRate type, uint exp)
	{
		if (type >= PBEGrowthRate.MAX)
		{
			throw new ArgumentOutOfRangeException(nameof(type));
		}

		ReadOnlySpan<uint> table = GetTable(type);
		if (exp > table[100 - 1] || exp < table[1 - 1])
		{
			throw new ArgumentOutOfRangeException(nameof(exp));
		}

		for (byte i = 0; i < 99; i++)
		{
			uint cur = table[i];
			uint next = table[i + 1];
			if (exp >= cur && exp < next)
			{
				return (byte)(i + 1);
			}
		}
		return 100;
	}

	private static ReadOnlySpan<uint> GetTable(PBEGrowthRate type)
	{
		switch (type)
		{
			case PBEGrowthRate.Erratic: return ErraticTable;
			case PBEGrowthRate.Fast: return FastTable;
			case PBEGrowthRate.Fluctuating: return FluctuatingTable;
			case PBEGrowthRate.MediumFast: return MediumFastTable;
			case PBEGrowthRate.MediumSlow: return MediumSlowTable;
			case PBEGrowthRate.Slow: return SlowTable;
			default: throw new ArgumentOutOfRangeException(nameof(type));
		}
	}
}
